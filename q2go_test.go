package main

import "testing"

func TestInitialize(t *testing.T) {

	initialize()

	if queueMap == nil {
		t.Errorf("No queue map existing")
	}

	if router == nil {
		t.Errorf("No router created")
	}

	route := router.Get("messageGet")
	if route == nil {
		t.Errorf("No route created for pop")
	}

	route = router.Get("messagePost")
	if route == nil {
		t.Errorf("No route created for push")
	}

	route = router.Get("queuePost")
	if route == nil {
		t.Errorf("No route created for createQueue")
	}

}

func TestGetQueueMap(t *testing.T) {

	initialize()

	createQueue(queueMap, "tq1")
	if len(queueMap) == 0 {
		t.Error("queueMap has zero length")
	}

	createQueue(queueMap, "tq2")
	if len(queueMap) != 2 {
		t.Error("queueMap has not length of two")
	}

}

func TestCreateQueueByName(t *testing.T) {

	initialize()

	qname := "tq"
	q := createQueue(queueMap, qname)
	if q == nil {
		t.Errorf("no queue generated by name %s", qname)
	}

}

func TestPushMessage(t *testing.T) {

	initialize()

	m := "test message"
	qname := "tq"
	q := createQueue(queueMap, qname)
	pushMessage(q, m)
	if q.Len() == 0 {
		t.Errorf("No message pushed in queue")
	}

}

func TestPopMessage(t *testing.T) {

	initialize()
	m := "test message"
	qnamea := "tq"
	q := createQueue(queueMap, qnamea)
	pushMessage(q, m)

	mga, _ := popMessage(qnamea)
	if mga != "test message" {
		t.Errorf("No message popped from queue")
	}

	mga, _ = popMessage(qnamea)
	if mga != "" {
		t.Errorf("Message found but should not")
	}

	qnameb := "notcreatedqueue"
	_, err := popMessage(qnameb)
	if err == nil {
		t.Errorf("Error should not occur because queue %s does not exist", qnameb)
	}

}
